#!/usr/bin/env python3
"""
SegCond Admin - Script de Execu√ß√£o
Sistema administrativo para gerenciar o SegCond
"""

import os
import sys
import subprocess
from pathlib import Path

def main():
    print("üöÄ SegCond Admin - Sistema de Administra√ß√£o")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("admin.py").exists():
        print("‚ùå Erro: Execute este script no diret√≥rio do SegCond")
        sys.exit(1)
    
    # Verificar se o ambiente virtual existe
    if not Path("venv").exists():
        print("‚ùå Ambiente virtual n√£o encontrado. Execute 'python3 setup.py' primeiro.")
        sys.exit(1)
    
    # Verificar se as depend√™ncias est√£o instaladas
    try:
        import flask
        import flask_sqlalchemy
        import flask_login
        print("‚úÖ Depend√™ncias verificadas")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("Execute: source venv/bin/activate && pip install -r requirements.txt")
        sys.exit(1)
    
    # Verificar se o banco de dados est√° acess√≠vel
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL n√£o configurado no arquivo .env")
            sys.exit(1)
        
        print("‚úÖ Configura√ß√£o do banco de dados verificada")
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√£o: {e}")
        sys.exit(1)
    
    # Verificar se a porta est√° livre
    admin_port = int(os.getenv('ADMIN_PORT', 5010))
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', admin_port))
        sock.close()
        
        if result == 0:
            print(f"‚ö†Ô∏è  Porta {admin_port} j√° est√° em uso")
            choice = input("Deseja tentar outra porta? (s/n): ").lower()
            if choice == 's':
                new_port = input(f"Digite uma nova porta (padr√£o: {admin_port + 1}): ").strip()
                if new_port:
                    admin_port = int(new_port)
                else:
                    admin_port += 1
                print(f"üîÑ Tentando porta {admin_port}")
            else:
                print("‚ùå Opera√ß√£o cancelada")
                sys.exit(1)
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar porta: {e}")
    
    # Atualizar arquivo .env com a porta do admin
    env_file = Path(".env")
    if env_file.exists():
        env_content = env_file.read_text()
        if "ADMIN_PORT=" not in env_content:
            env_content += f"\nADMIN_PORT={admin_port}\n"
        else:
            # Substituir porta existente
            import re
            env_content = re.sub(r'ADMIN_PORT=\d+', f'ADMIN_PORT={admin_port}', env_content)
        
        env_file.write_text(env_content)
        print(f"‚úÖ Porta do admin configurada: {admin_port}")
    
    # Verificar se o banco de dados tem as tabelas necess√°rias
    print("üîç Verificando estrutura do banco de dados...")
    try:
        from admin import app, db
        with app.app_context():
            # Tentar criar as tabelas se n√£o existirem
            db.create_all()
            print("‚úÖ Estrutura do banco de dados verificada")
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco de dados: {e}")
        print("Verifique se o MySQL est√° rodando e as credenciais est√£o corretas")
        sys.exit(1)
    
    # Verificar se h√° usu√°rio admin
    try:
        from admin import Usuario
        from werkzeug.security import generate_password_hash
        
        with app.app_context():
            admin_user = Usuario.query.filter_by(tipo='admin').first()
            if not admin_user:
                print("‚ö†Ô∏è  Nenhum usu√°rio administrador encontrado")
                print("Criando usu√°rio admin padr√£o...")
                
                novo_admin = Usuario(
                    nome='Administrador',
                    email='admin@segcond.com',
                    senha_hash=generate_password_hash('admin123'),
                    tipo='admin'
                )
                db.session.add(novo_admin)
                db.session.commit()
                print("‚úÖ Usu√°rio admin criado:")
                print("   Email: admin@segcond.com")
                print("   Senha: admin123")
                print("   ‚ö†Ô∏è  ALTERE A SENHA AP√ìS O PRIMEIRO LOGIN!")
            else:
                print("‚úÖ Usu√°rio administrador encontrado")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar usu√°rio admin: {e}")
    
    # Iniciar o sistema administrativo
    print("\nüöÄ Iniciando SegCond Admin...")
    print(f"üì± Acesse: http://localhost:{admin_port}/admin")
    print(f"üåê Acesso externo: http://0.0.0.0:{admin_port}/admin")
    print("\nüìã Credenciais padr√£o:")
    print("   Email: admin@segcond.com")
    print("   Senha: admin123")
    print("\n‚èπÔ∏è  Para parar: Ctrl+C")
    print("=" * 50)
    
    try:
        # Executar o admin
        os.environ['ADMIN_PORT'] = str(admin_port)
        os.environ['ADMIN_DEBUG'] = 'True'
        
        from admin import app
        app.run(
            host='0.0.0.0',
            port=admin_port,
            debug=True
        )
    except KeyboardInterrupt:
        print("\n\nüõë SegCond Admin parado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao executar SegCond Admin: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
