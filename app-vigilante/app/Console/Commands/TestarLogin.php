<?php

namespace App\Console\Commands;

use App\Models\Usuario;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Hash;

class TestarLogin extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'teste:login';

    /**
     * The console command description.
     */
    protected $description = 'Testar login e verificar usu√°rios dispon√≠veis';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîê Testando sistema de login...');
        
        // Verificar usu√°rios vigilantes dispon√≠veis
        $vigilantes = Usuario::where('tipo', 'vigilante')->where('ativo', true)->get();
        
        if ($vigilantes->isEmpty()) {
            $this->warn('‚ö†Ô∏è  Nenhum usu√°rio vigilante encontrado!');
            
            // Criar usu√°rio de teste
            $this->info('üìù Criando usu√°rio vigilante de teste...');
            
            $usuario = Usuario::create([
                'nome' => 'Vigilante Teste',
                'email' => 'vigilante@teste.com',
                'senha_hash' => Hash::make('123456'),
                'tipo' => 'vigilante',
                'telefone' => '(11) 99999-9999',
                'ativo' => true,
            ]);
            
            $this->info("‚úÖ Usu√°rio criado: {$usuario->email} / senha: 123456");
        } else {
            $this->info('üë• Usu√°rios vigilantes dispon√≠veis:');
            foreach ($vigilantes as $vigilante) {
                $this->line("   üìß {$vigilante->email} - {$vigilante->nome}");
            }
        }
        
        // Verificar configura√ß√£o de sess√£o
        $this->info('‚öôÔ∏è  Configura√ß√µes de sess√£o:');
        $this->line('   Driver: ' . config('session.driver'));
        $this->line('   Lifetime: ' . config('session.lifetime') . ' minutos');
        
        // Testar URL de login
        $this->info('üåê URLs de teste:');
        $this->line('   Login: http://localhost:8001/login');
        $this->line('   Alt: http://localhost:8001/auth/login');
        
        $this->info('üéØ Dicas para resolver erro 419:');
        $this->line('   1. Limpe cookies do navegador');
        $this->line('   2. Tente em janela an√¥nima');
        $this->line('   3. Verifique se JavaScript est√° habilitado');
        $this->line('   4. Use F12 > Network para ver requisi√ß√µes');
        
        $this->info('üîß Corre√ß√µes implementadas para erro 419:');
        $this->line('   ‚úÖ Middleware CSRF atualizado');
        $this->line('   ‚úÖ Rotas de presen√ßa exclu√≠das da verifica√ß√£o CSRF');
        $this->line('   ‚úÖ Tratamento de erro 419 em JavaScript');
        $this->line('   ‚úÖ Renova√ß√£o autom√°tica de token CSRF');
        $this->line('   ‚úÖ Headers X-Requested-With adicionados');
        
        $this->info('üß™ Para testar:');
        $this->line('   1. Acesse: http://localhost:8001/login');
        $this->line('   2. Fa√ßa login com: marcio@gmail.com');
        $this->line('   3. V√° para a p√°gina do posto');
        $this->line('   4. Tente registrar chegada/sa√≠da');
        $this->line('   5. Verifique console do navegador (F12)');
        
        $this->info('üîÑ Novos ciclos implementados:');
        $this->line('   ‚úÖ 10 verifica√ß√µes ao longo do turno');
        $this->line('   ‚úÖ Hor√°rios espec√≠ficos para cada ponto');
        $this->line('   ‚úÖ M√∫ltiplas ocorr√™ncias dos mesmos locais');
        $this->line('   ‚úÖ Instru√ß√µes espec√≠ficas para cada verifica√ß√£o');
        
        $this->info('üìç Exemplo de ciclos:');
        $this->line('   18:00-18:40 Bifurca√ß√£o Rua Gurupi (teste)');
        $this->line('   19:00-19:45 Portaria Principal (ver ve√≠culos)');
        $this->line('   20:30-20:55 Portaria Principal (Ver atras das √°rvores)');
        $this->line('   21:45-22:25 Bifurca√ß√£o Rua Gurupi (teste)');
        $this->line('   ... e mais 6 verifica√ß√µes at√© 05:55');
        
        return 0;
    }
}
